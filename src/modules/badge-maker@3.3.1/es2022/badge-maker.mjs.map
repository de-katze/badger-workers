{"mappings":"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","names":["require_color","__commonJSMin","exports","module","fromString","namedColors","aliases","resolvedAliases","alias","original","hexColorRegex","isHexColor","s","isCSSColor","color","normalizeColor","toSvgColor","normalized","brightness","cssColor","rgb","require_xml","__commonJSMin","exports","module","stripXmlWhitespace","xml","escapeXml","s","XmlElement","_XmlElement","name","content","attrs","attrsStr","k","v","el","require_badge_renderers","__commonJSMin","exports","module","anafanafo","brightness","XmlElement","escapeXml","FONT_SCALE_UP_FACTOR","FONT_SCALE_DOWN_VALUE","FONT_FAMILY","fontFamily","socialFontFamily","brightnessThreshold","capitalize","s","colorsForBackground","color","roundUpToOdd","val","preferredWidthOf","str","options","createAccessibleText","label","message","hasLinks","links","leftLink","rightLink","hasLeftLink","hasRightLink","shouldWrapBodyWithLink","renderAriaAttributes","accessibleText","hasLink","renderTitle","renderLogo","logo","badgeHeight","horizPadding","logoWidth","logoPadding","y","x","renderLink","link","height","textLength","leftMargin","renderedText","rectHeight","rectWidth","rectX","renderText","content","verticalMargin","shadow","escapedContent","shadowMargin","textMargin","outTextLength","textColor","shadowColor","renderBadge","leftWidth","rightWidth","main","width","Badge","labelColor","hasLogo","totalLogoWidth","renderedLogo","hasLabel","labelMargin","renderedLabel","labelWidth","messageMargin","renderedMessage","messageWidth","params","Plastic","Flat","FlatSquare","social","externalHeight","internalHeight","labelHorizPadding","messageHorizPadding","horizGutter","hasMessage","font","labelTextWidth","messageTextWidth","labelRectWidth","messageRectWidth","renderMessageBubble","messageBubbleMainX","messageBubbleNotchX","renderLabelText","labelTextX","labelTextLength","escapedLabel","shouldWrapWithLink","rect","text","renderMessageText","messageTextX","messageTextLength","escapedMessage","forTheBadge","outLabelColor","needsLabelRect","logoMinX","labelTextMinX","messageTextMinX","logoElement","getLabelElement","midX","getMessageElement","backgroundContent","backgroundGroup","foregroundGroup","require_make_badge","__commonJSMin","exports","module","normalizeColor","toSvgColor","badgeRenderers","stripXmlWhitespace","format","style","label","message","color","labelColor","logo","logoPosition","logoWidth","links","render","require_lib","__commonJSMin","exports","module","_makeBadge","ValidationError","_validate","format","field","styleValues","_clean","expectedKeys","cleaned","key","makeBadge","cleanedFormat","build_exports","__export","ValidationError","build_default","makeBadge","__module","__reExport","__default","__rest"],"sourceRoot":"/","sources":["../../../../../var/www/esmd/npm/badge-maker@3.3.1/node_modules/.pnpm/badge-maker@3.3.1/node_modules/badge-maker/lib/color.js","../../../../../var/www/esmd/npm/badge-maker@3.3.1/node_modules/.pnpm/badge-maker@3.3.1/node_modules/badge-maker/lib/xml.js","../../../../../var/www/esmd/npm/badge-maker@3.3.1/node_modules/.pnpm/badge-maker@3.3.1/node_modules/badge-maker/lib/badge-renderers.js","../../../../../var/www/esmd/npm/badge-maker@3.3.1/node_modules/.pnpm/badge-maker@3.3.1/node_modules/badge-maker/lib/make-badge.js","../../../../../var/www/esmd/npm/badge-maker@3.3.1/node_modules/.pnpm/badge-maker@3.3.1/node_modules/badge-maker/lib/index.js","../../../../../var/www/esmd/npm/badge-maker@3.3.1/build.js"],"sourcesContent":["'use strict'\n\nconst { fromString } = require('css-color-converter')\n\n// When updating these, be sure also to update the list in `badge-maker/README.md`.\nconst namedColors = {\n  brightgreen: '#4c1',\n  green: '#97ca00',\n  yellow: '#dfb317',\n  yellowgreen: '#a4a61d',\n  orange: '#fe7d37',\n  red: '#e05d44',\n  blue: '#007ec6',\n  grey: '#555',\n  lightgrey: '#9f9f9f',\n}\n\nconst aliases = {\n  gray: 'grey',\n  lightgray: 'lightgrey',\n  critical: 'red',\n  important: 'orange',\n  success: 'brightgreen',\n  informational: 'blue',\n  inactive: 'lightgrey',\n}\n\nconst resolvedAliases = {}\nObject.entries(aliases).forEach(([alias, original]) =\u003e {\n  resolvedAliases[alias] = namedColors[original]\n})\n\n// This function returns false for `#ccc`. However `isCSSColor('#ccc')` is\n// true.\nconst hexColorRegex = /^([\\da-f]{3}){1,2}$/i\nfunction isHexColor(s = '') {\n  return hexColorRegex.test(s)\n}\n\nfunction isCSSColor(color) {\n  return typeof color === 'string' \u0026\u0026 fromString(color.trim())\n}\n\nfunction normalizeColor(color) {\n  if (color === undefined) {\n    return undefined\n  } else if (color in namedColors) {\n    return color\n  } else if (color in aliases) {\n    return aliases[color]\n  } else if (isHexColor(color)) {\n    return `#${color.toLowerCase()}`\n  } else if (isCSSColor(color)) {\n    return color.toLowerCase()\n  } else {\n    return undefined\n  }\n}\n\nfunction toSvgColor(color) {\n  const normalized = normalizeColor(color)\n  if (normalized in namedColors) {\n    return namedColors[normalized]\n  } else if (normalized in resolvedAliases) {\n    return resolvedAliases[normalized]\n  } else {\n    return normalized\n  }\n}\n\nfunction brightness(color) {\n  if (color) {\n    const cssColor = fromString(color)\n    if (cssColor) {\n      const rgb = cssColor.toRgbaArray()\n      return +((rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 255000).toFixed(2)\n    }\n  }\n  return 0\n}\n\nmodule.exports = {\n  namedColors,\n  isHexColor,\n  normalizeColor,\n  toSvgColor,\n  brightness,\n}\n","/**\n * @module\n */\n\n'use strict'\n\nfunction stripXmlWhitespace(xml) {\n  return xml.replace(/\u003e\\s+/g, '\u003e').replace(/\u003c\\s+/g, '\u003c').trim()\n}\n\nfunction escapeXml(s) {\n  if (typeof s === 'number') {\n    return s\n  } else if (s === undefined || typeof s !== 'string') {\n    return undefined\n  } else {\n    return s\n      .replace(/\u0026/g, '\u0026amp;')\n      .replace(/\u003c/g, '\u0026lt;')\n      .replace(/\u003e/g, '\u0026gt;')\n      .replace(/\"/g, '\u0026quot;')\n      .replace(/'/g, '\u0026apos;')\n  }\n}\n\n/**\n * Representation of an XML element\n */\nclass XmlElement {\n  /**\n   * Xml Element Constructor\n   *\n   * @param {object} attrs Refer to individual attrs\n   * @param {string} attrs.name\n   *    Name of the XML tag\n   * @param {Array.\u003cstring|module:badge-maker/lib/xml-element~XmlElement\u003e} [attrs.content=[]]\n   *    Array of objects to render inside the tag. content may contain a mix of\n   *    string and XmlElement objects. If content is `[]` or ommitted the\n   *    element will be rendered as a self-closing element.\n   * @param {object} [attrs.attrs={}]\n   *    Object representing the tag's attributes as name/value pairs\n   */\n  constructor({ name, content = [], attrs = {} }) {\n    this.name = name\n    this.content = content\n    this.attrs = attrs\n  }\n\n  /**\n   * Render the XML element to a string, applying appropriate escaping\n   *\n   * @returns {string} String representation of the XML element\n   */\n  render() {\n    const attrsStr = Object.entries(this.attrs)\n      .map(([k, v]) =\u003e ` ${k}=\"${escapeXml(v)}\"`)\n      .join('')\n    if (this.content.length \u003e 0) {\n      const content = this.content\n        .map(function (el) {\n          if (el instanceof XmlElement) {\n            return el.render()\n          } else {\n            return escapeXml(el)\n          }\n        })\n        .join(' ')\n      return stripXmlWhitespace(\n        `\u003c${this.name}${attrsStr}\u003e${content}\u003c/${this.name}\u003e`\n      )\n    }\n    return stripXmlWhitespace(`\u003c${this.name}${attrsStr}/\u003e`)\n  }\n}\n\nmodule.exports = { escapeXml, stripXmlWhitespace, XmlElement }\n","'use strict'\n\nconst anafanafo = require('anafanafo')\nconst { brightness } = require('./color')\nconst { XmlElement, escapeXml } = require('./xml')\n\n// https://github.com/badges/shields/pull/1132\nconst FONT_SCALE_UP_FACTOR = 10\nconst FONT_SCALE_DOWN_VALUE = 'scale(.1)'\n\nconst FONT_FAMILY = 'Verdana,Geneva,DejaVu Sans,sans-serif'\nconst fontFamily = `font-family=\"${FONT_FAMILY}\"`\nconst socialFontFamily =\n  'font-family=\"Helvetica Neue,Helvetica,Arial,sans-serif\"'\nconst brightnessThreshold = 0.69\n\nfunction capitalize(s) {\n  return `${s.charAt(0).toUpperCase()}${s.slice(1)}`\n}\n\nfunction colorsForBackground(color) {\n  if (brightness(color) \u003c= brightnessThreshold) {\n    return { textColor: '#fff', shadowColor: '#010101' }\n  } else {\n    return { textColor: '#333', shadowColor: '#ccc' }\n  }\n}\n\nfunction roundUpToOdd(val) {\n  return val % 2 === 0 ? val + 1 : val\n}\n\nfunction preferredWidthOf(str, options) {\n  // Increase chances of pixel grid alignment.\n  return roundUpToOdd(anafanafo(str, options) | 0)\n}\n\nfunction createAccessibleText({ label, message }) {\n  const labelPrefix = label ? `${label}: ` : ''\n  return labelPrefix + message\n}\n\nfunction hasLinks({ links }) {\n  const [leftLink, rightLink] = links || []\n  const hasLeftLink = leftLink \u0026\u0026 leftLink.length\n  const hasRightLink = rightLink \u0026\u0026 rightLink.length\n  const hasLink = hasLeftLink \u0026\u0026 hasRightLink\n  return { hasLink, hasLeftLink, hasRightLink }\n}\n\nfunction shouldWrapBodyWithLink({ links }) {\n  const { hasLeftLink, hasRightLink } = hasLinks({ links })\n  return hasLeftLink \u0026\u0026 !hasRightLink\n}\n\nfunction renderAriaAttributes({ accessibleText, links }) {\n  const { hasLink } = hasLinks({ links })\n  return hasLink ? '' : `role=\"img\" aria-label=\"${escapeXml(accessibleText)}\"`\n}\n\nfunction renderTitle({ accessibleText, links }) {\n  const { hasLink } = hasLinks({ links })\n  return hasLink ? '' : `\u003ctitle\u003e${escapeXml(accessibleText)}\u003c/title\u003e`\n}\n\nfunction renderLogo({\n  logo,\n  badgeHeight,\n  horizPadding,\n  logoWidth = 14,\n  logoPadding = 0,\n}) {\n  if (logo) {\n    const logoHeight = 14\n    const y = (badgeHeight - logoHeight) / 2\n    const x = horizPadding\n    return {\n      hasLogo: true,\n      totalLogoWidth: logoWidth + logoPadding,\n      renderedLogo: `\u003cimage x=\"${x}\" y=\"${y}\" width=\"${logoWidth}\" height=\"${logoHeight}\" xlink:href=\"${escapeXml(\n        logo\n      )}\"/\u003e`,\n    }\n  } else {\n    return { hasLogo: false, totalLogoWidth: 0, renderedLogo: '' }\n  }\n}\n\nfunction renderLink({\n  link,\n  height,\n  textLength,\n  horizPadding,\n  leftMargin,\n  renderedText,\n}) {\n  const rectHeight = height\n  const rectWidth = textLength + horizPadding * 2\n  const rectX = leftMargin \u003e 1 ? leftMargin + 1 : 0\n  return `\u003ca target=\"_blank\" xlink:href=\"${escapeXml(link)}\"\u003e\n    \u003crect width=\"${rectWidth}\" x=\"${rectX}\" height=\"${rectHeight}\" fill=\"rgba(0,0,0,0)\" /\u003e\n    ${renderedText}\n  \u003c/a\u003e`\n}\n\nfunction renderText({\n  leftMargin,\n  horizPadding = 0,\n  content,\n  link,\n  height,\n  verticalMargin = 0,\n  shadow = false,\n  color,\n}) {\n  if (!content.length) {\n    return { renderedText: '', width: 0 }\n  }\n\n  const textLength = preferredWidthOf(content, { font: '11px Verdana' })\n  const escapedContent = escapeXml(content)\n\n  const shadowMargin = 150 + verticalMargin\n  const textMargin = 140 + verticalMargin\n\n  const outTextLength = 10 * textLength\n  const x = 10 * (leftMargin + 0.5 * textLength + horizPadding)\n\n  let renderedText = ''\n  const { textColor, shadowColor } = colorsForBackground(color)\n  if (shadow) {\n    renderedText = `\u003ctext aria-hidden=\"true\" x=\"${x}\" y=\"${shadowMargin}\" fill=\"${shadowColor}\" fill-opacity=\".3\" transform=\"scale(.1)\" textLength=\"${outTextLength}\"\u003e${escapedContent}\u003c/text\u003e`\n  }\n  renderedText += `\u003ctext x=\"${x}\" y=\"${textMargin}\" transform=\"scale(.1)\" fill=\"${textColor}\" textLength=\"${outTextLength}\"\u003e${escapedContent}\u003c/text\u003e`\n\n  return {\n    renderedText: link\n      ? renderLink({\n          link,\n          height,\n          textLength,\n          horizPadding,\n          leftMargin,\n          renderedText,\n        })\n      : renderedText,\n    width: textLength,\n  }\n}\n\nfunction renderBadge(\n  { links, leftWidth, rightWidth, height, accessibleText },\n  main\n) {\n  const width = leftWidth + rightWidth\n  const leftLink = escapeXml(links[0])\n\n  return `\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"${width}\" height=\"${height}\" ${renderAriaAttributes(\n    { links, accessibleText }\n  )}\u003e\n\n    ${renderTitle({ accessibleText, links })}\n    ${\n      shouldWrapBodyWithLink({ links })\n        ? `\u003ca target=\"_blank\" xlink:href=\"${leftLink}\"\u003e${main}\u003c/a\u003e`\n        : main\n    }\n    \u003c/svg\u003e`\n}\n\nclass Badge {\n  static get fontFamily() {\n    throw new Error('Not implemented')\n  }\n\n  static get height() {\n    throw new Error('Not implemented')\n  }\n\n  static get verticalMargin() {\n    throw new Error('Not implemented')\n  }\n\n  static get shadow() {\n    throw new Error('Not implemented')\n  }\n\n  constructor({\n    label,\n    message,\n    links,\n    logo,\n    logoWidth,\n    logoPadding,\n    color = '#4c1',\n    labelColor,\n  }) {\n    const horizPadding = 5\n    const { hasLogo, totalLogoWidth, renderedLogo } = renderLogo({\n      logo,\n      badgeHeight: this.constructor.height,\n      horizPadding,\n      logoWidth,\n      logoPadding,\n    })\n    const hasLabel = label.length || labelColor\n    if (labelColor == null) {\n      labelColor = '#555'\n    }\n\n    const [leftLink, rightLink] = links\n\n    labelColor = hasLabel || hasLogo ? labelColor : color\n    labelColor = escapeXml(labelColor)\n    color = escapeXml(color)\n\n    const labelMargin = totalLogoWidth + 1\n\n    const { renderedText: renderedLabel, width: labelWidth } = renderText({\n      leftMargin: labelMargin,\n      horizPadding,\n      content: label,\n      link: !shouldWrapBodyWithLink({ links }) \u0026\u0026 leftLink,\n      height: this.constructor.height,\n      verticalMargin: this.constructor.verticalMargin,\n      shadow: this.constructor.shadow,\n      color: labelColor,\n    })\n\n    const leftWidth = hasLabel\n      ? labelWidth + 2 * horizPadding + totalLogoWidth\n      : 0\n\n    let messageMargin = leftWidth - (message.length ? 1 : 0)\n    if (!hasLabel) {\n      if (hasLogo) {\n        messageMargin = messageMargin + totalLogoWidth + horizPadding\n      } else {\n        messageMargin = messageMargin + 1\n      }\n    }\n\n    const { renderedText: renderedMessage, width: messageWidth } = renderText({\n      leftMargin: messageMargin,\n      horizPadding,\n      content: message,\n      link: rightLink,\n      height: this.constructor.height,\n      verticalMargin: this.constructor.verticalMargin,\n      shadow: this.constructor.shadow,\n      color,\n    })\n\n    let rightWidth = messageWidth + 2 * horizPadding\n    if (hasLogo \u0026\u0026 !hasLabel) {\n      rightWidth += totalLogoWidth + horizPadding - 1\n    }\n\n    const width = leftWidth + rightWidth\n\n    const accessibleText = createAccessibleText({ label, message })\n\n    this.links = links\n    this.leftWidth = leftWidth\n    this.rightWidth = rightWidth\n    this.width = width\n    this.labelColor = labelColor\n    this.color = color\n    this.label = label\n    this.message = message\n    this.accessibleText = accessibleText\n    this.renderedLogo = renderedLogo\n    this.renderedLabel = renderedLabel\n    this.renderedMessage = renderedMessage\n  }\n\n  static render(params) {\n    return new this(params).render()\n  }\n\n  render() {\n    throw new Error('Not implemented')\n  }\n}\n\nclass Plastic extends Badge {\n  static get fontFamily() {\n    return fontFamily\n  }\n\n  static get height() {\n    return 18\n  }\n\n  static get verticalMargin() {\n    return -10\n  }\n\n  static get shadow() {\n    return true\n  }\n\n  render() {\n    return renderBadge(\n      {\n        links: this.links,\n        leftWidth: this.leftWidth,\n        rightWidth: this.rightWidth,\n        accessibleText: this.accessibleText,\n        height: this.constructor.height,\n      },\n      `\n      \u003clinearGradient id=\"s\" x2=\"0\" y2=\"100%\"\u003e\n        \u003cstop offset=\"0\"  stop-color=\"#fff\" stop-opacity=\".7\"/\u003e\n        \u003cstop offset=\".1\" stop-color=\"#aaa\" stop-opacity=\".1\"/\u003e\n        \u003cstop offset=\".9\" stop-color=\"#000\" stop-opacity=\".3\"/\u003e\n        \u003cstop offset=\"1\"  stop-color=\"#000\" stop-opacity=\".5\"/\u003e\n      \u003c/linearGradient\u003e\n\n      \u003cclipPath id=\"r\"\u003e\n        \u003crect width=\"${this.width}\" height=\"${this.constructor.height}\" rx=\"4\" fill=\"#fff\"/\u003e\n      \u003c/clipPath\u003e\n\n      \u003cg clip-path=\"url(#r)\"\u003e\n        \u003crect width=\"${this.leftWidth}\" height=\"${this.constructor.height}\" fill=\"${this.labelColor}\"/\u003e\n        \u003crect x=\"${this.leftWidth}\" width=\"${this.rightWidth}\" height=\"${this.constructor.height}\" fill=\"${this.color}\"/\u003e\n        \u003crect width=\"${this.width}\" height=\"${this.constructor.height}\" fill=\"url(#s)\"/\u003e\n      \u003c/g\u003e\n\n      \u003cg fill=\"#fff\" text-anchor=\"middle\" ${this.constructor.fontFamily} text-rendering=\"geometricPrecision\" font-size=\"110\"\u003e\n        ${this.renderedLogo}\n        ${this.renderedLabel}\n        ${this.renderedMessage}\n      \u003c/g\u003e`\n    )\n  }\n}\n\nclass Flat extends Badge {\n  static get fontFamily() {\n    return fontFamily\n  }\n\n  static get height() {\n    return 20\n  }\n\n  static get verticalMargin() {\n    return 0\n  }\n\n  static get shadow() {\n    return true\n  }\n\n  render() {\n    return renderBadge(\n      {\n        links: this.links,\n        leftWidth: this.leftWidth,\n        rightWidth: this.rightWidth,\n        accessibleText: this.accessibleText,\n        height: this.constructor.height,\n      },\n      `\n      \u003clinearGradient id=\"s\" x2=\"0\" y2=\"100%\"\u003e\n        \u003cstop offset=\"0\" stop-color=\"#bbb\" stop-opacity=\".1\"/\u003e\n        \u003cstop offset=\"1\" stop-opacity=\".1\"/\u003e\n      \u003c/linearGradient\u003e\n\n      \u003cclipPath id=\"r\"\u003e\n        \u003crect width=\"${this.width}\" height=\"${this.constructor.height}\" rx=\"3\" fill=\"#fff\"/\u003e\n      \u003c/clipPath\u003e\n\n      \u003cg clip-path=\"url(#r)\"\u003e\n        \u003crect width=\"${this.leftWidth}\" height=\"${this.constructor.height}\" fill=\"${this.labelColor}\"/\u003e\n        \u003crect x=\"${this.leftWidth}\" width=\"${this.rightWidth}\" height=\"${this.constructor.height}\" fill=\"${this.color}\"/\u003e\n        \u003crect width=\"${this.width}\" height=\"${this.constructor.height}\" fill=\"url(#s)\"/\u003e\n      \u003c/g\u003e\n\n      \u003cg fill=\"#fff\" text-anchor=\"middle\" ${this.constructor.fontFamily} text-rendering=\"geometricPrecision\" font-size=\"110\"\u003e\n        ${this.renderedLogo}\n        ${this.renderedLabel}\n        ${this.renderedMessage}\n      \u003c/g\u003e`\n    )\n  }\n}\n\nclass FlatSquare extends Badge {\n  static get fontFamily() {\n    return fontFamily\n  }\n\n  static get height() {\n    return 20\n  }\n\n  static get verticalMargin() {\n    return 0\n  }\n\n  static get shadow() {\n    return false\n  }\n\n  render() {\n    return renderBadge(\n      {\n        links: this.links,\n        leftWidth: this.leftWidth,\n        rightWidth: this.rightWidth,\n        accessibleText: this.accessibleText,\n        height: this.constructor.height,\n      },\n      `\n      \u003cg shape-rendering=\"crispEdges\"\u003e\n        \u003crect width=\"${this.leftWidth}\" height=\"${this.constructor.height}\" fill=\"${this.labelColor}\"/\u003e\n        \u003crect x=\"${this.leftWidth}\" width=\"${this.rightWidth}\" height=\"${this.constructor.height}\" fill=\"${this.color}\"/\u003e\n      \u003c/g\u003e\n\n      \u003cg fill=\"#fff\" text-anchor=\"middle\" ${this.constructor.fontFamily} text-rendering=\"geometricPrecision\" font-size=\"110\"\u003e\n        ${this.renderedLogo}\n        ${this.renderedLabel}\n        ${this.renderedMessage}\n      \u003c/g\u003e`\n    )\n  }\n}\n\nfunction social({\n  label,\n  message,\n  links = [],\n  logo,\n  logoWidth,\n  logoPadding,\n  color = '#4c1',\n  labelColor = '#555',\n}) {\n  // Social label is styled with a leading capital. Convert to caps here so\n  // width can be measured using the correct characters.\n  label = capitalize(label)\n\n  const externalHeight = 20\n  const internalHeight = 19\n  const labelHorizPadding = 5\n  const messageHorizPadding = 4\n  const horizGutter = 6\n  const { totalLogoWidth, renderedLogo } = renderLogo({\n    logo,\n    badgeHeight: externalHeight,\n    horizPadding: labelHorizPadding,\n    logoWidth,\n    logoPadding,\n  })\n  const hasMessage = message.length\n\n  const font = 'bold 11px Helvetica'\n  const labelTextWidth = preferredWidthOf(label, { font })\n  const messageTextWidth = preferredWidthOf(message, { font })\n  const labelRectWidth = labelTextWidth + totalLogoWidth + 2 * labelHorizPadding\n  const messageRectWidth = messageTextWidth + 2 * messageHorizPadding\n\n  let [leftLink, rightLink] = links\n  leftLink = escapeXml(leftLink)\n  rightLink = escapeXml(rightLink)\n  const { hasLeftLink, hasRightLink, hasLink } = hasLinks({ links })\n\n  const accessibleText = createAccessibleText({ label, message })\n\n  function renderMessageBubble() {\n    const messageBubbleMainX = labelRectWidth + horizGutter + 0.5\n    const messageBubbleNotchX = labelRectWidth + horizGutter\n    return `\n      \u003crect x=\"${messageBubbleMainX}\" y=\"0.5\" width=\"${messageRectWidth}\" height=\"${internalHeight}\" rx=\"2\" fill=\"#fafafa\"/\u003e\n      \u003crect x=\"${messageBubbleNotchX}\" y=\"7.5\" width=\"0.5\" height=\"5\" stroke=\"#fafafa\"/\u003e\n      \u003cpath d=\"M${messageBubbleMainX} 6.5 l-3 3v1 l3 3\" stroke=\"d5d5d5\" fill=\"#fafafa\"/\u003e\n    `\n  }\n\n  function renderLabelText() {\n    const labelTextX =\n      10 * (totalLogoWidth + labelTextWidth / 2 + labelHorizPadding)\n    const labelTextLength = 10 * labelTextWidth\n    const escapedLabel = escapeXml(label)\n    const shouldWrapWithLink = hasLeftLink \u0026\u0026 !shouldWrapBodyWithLink({ links })\n\n    const rect = `\u003crect id=\"llink\" stroke=\"#d5d5d5\" fill=\"url(#a)\" x=\".5\" y=\".5\" width=\"${labelRectWidth}\" height=\"${internalHeight}\" rx=\"2\" /\u003e`\n    const shadow = `\u003ctext aria-hidden=\"true\" x=\"${labelTextX}\" y=\"150\" fill=\"#fff\" transform=\"scale(.1)\" textLength=\"${labelTextLength}\"\u003e${escapedLabel}\u003c/text\u003e`\n    const text = `\u003ctext x=\"${labelTextX}\" y=\"140\" transform=\"scale(.1)\" textLength=\"${labelTextLength}\"\u003e${escapedLabel}\u003c/text\u003e`\n\n    return shouldWrapWithLink\n      ? `\n        \u003ca target=\"_blank\" xlink:href=\"${leftLink}\"\u003e\n          ${shadow}\n          ${text}\n          ${rect}\n        \u003c/a\u003e\n      `\n      : `\n      ${rect}\n      ${shadow}\n      ${text}\n    `\n  }\n\n  function renderMessageText() {\n    const messageTextX =\n      10 * (labelRectWidth + horizGutter + messageRectWidth / 2)\n    const messageTextLength = 10 * messageTextWidth\n    const escapedMessage = escapeXml(message)\n\n    const rect = `\u003crect width=\"${messageRectWidth + 1}\" x=\"${\n      labelRectWidth + horizGutter\n    }\" height=\"${internalHeight + 1}\" fill=\"rgba(0,0,0,0)\" /\u003e`\n    const shadow = `\u003ctext aria-hidden=\"true\" x=\"${messageTextX}\" y=\"150\" fill=\"#fff\" transform=\"scale(.1)\" textLength=\"${messageTextLength}\"\u003e${escapedMessage}\u003c/text\u003e`\n    const text = `\u003ctext id=\"rlink\" x=\"${messageTextX}\" y=\"140\" transform=\"scale(.1)\" textLength=\"${messageTextLength}\"\u003e${escapedMessage}\u003c/text\u003e`\n\n    return hasRightLink\n      ? `\n        \u003ca target=\"_blank\" xlink:href=\"${rightLink}\"\u003e\n          ${rect}\n          ${shadow}\n          ${text}\n        \u003c/a\u003e\n      `\n      : `\n      ${shadow}\n      ${text}\n    `\n  }\n\n  return renderBadge(\n    {\n      links,\n      leftWidth: labelRectWidth + 1,\n      rightWidth: hasMessage ? horizGutter + messageRectWidth : 0,\n      accessibleText,\n      height: externalHeight,\n    },\n    `\n    \u003cstyle\u003ea:hover #llink{fill:url(#b);stroke:#ccc}a:hover #rlink{fill:#4183c4}\u003c/style\u003e\n    \u003clinearGradient id=\"a\" x2=\"0\" y2=\"100%\"\u003e\n      \u003cstop offset=\"0\" stop-color=\"#fcfcfc\" stop-opacity=\"0\"/\u003e\n      \u003cstop offset=\"1\" stop-opacity=\".1\"/\u003e\n    \u003c/linearGradient\u003e\n    \u003clinearGradient id=\"b\" x2=\"0\" y2=\"100%\"\u003e\n      \u003cstop offset=\"0\" stop-color=\"#ccc\" stop-opacity=\".1\"/\u003e\n      \u003cstop offset=\"1\" stop-opacity=\".1\"/\u003e\n    \u003c/linearGradient\u003e\n    \u003cg stroke=\"#d5d5d5\"\u003e\n      \u003crect stroke=\"none\" fill=\"#fcfcfc\" x=\"0.5\" y=\"0.5\" width=\"${labelRectWidth}\" height=\"${internalHeight}\" rx=\"2\"/\u003e\n      ${hasMessage ? renderMessageBubble() : ''}\n    \u003c/g\u003e\n    ${renderedLogo}\n    \u003cg aria-hidden=\"${!hasLink}\" fill=\"#333\" text-anchor=\"middle\" ${socialFontFamily} text-rendering=\"geometricPrecision\" font-weight=\"700\" font-size=\"110px\" line-height=\"14px\"\u003e\n      ${renderLabelText()}\n      ${hasMessage ? renderMessageText() : ''}\n    \u003c/g\u003e\n    `\n  )\n}\n\nfunction forTheBadge({\n  label,\n  message,\n  links,\n  logo,\n  logoWidth,\n  color = '#4c1',\n  labelColor,\n}) {\n  const FONT_SIZE = 10\n  const BADGE_HEIGHT = 28\n  const LOGO_HEIGHT = 14\n  const TEXT_MARGIN = 12\n  const LOGO_MARGIN = 9\n  const LOGO_TEXT_GUTTER = 6\n  const LETTER_SPACING = 1.25\n\n  // Prepare content. For the Badge is styled in all caps. It's important to to\n  // convert to uppercase first so the widths can be measured using the correct\n  // symbols.\n  label = label.toUpperCase()\n  message = message.toUpperCase()\n\n  const [leftLink, rightLink] = links\n  const { hasLeftLink, hasRightLink } = hasLinks({ links })\n\n  const outLabelColor = labelColor || '#555'\n\n  // Compute text width.\n  // TODO: This really should count the symbols rather than just using `.length`.\n  // https://mathiasbynens.be/notes/javascript-unicode\n  // This is not using `preferredWidthOf()` as it tends to produce larger\n  // inconsistencies in the letter spacing. The badges look fine, however if you\n  // replace `textLength` with `letterSpacing` in the rendered SVG, you can see\n  // the discrepancy. Ideally, swapping out `textLength` for `letterSpacing`\n  // should not affect the appearance.\n  const labelTextWidth = label.length\n    ? (anafanafo(label, { font: `${FONT_SIZE}px Verdana` }) | 0) +\n      LETTER_SPACING * label.length\n    : 0\n  const messageTextWidth = message.length\n    ? (anafanafo(message, { font: `bold ${FONT_SIZE}px Verdana` }) | 0) +\n      LETTER_SPACING * message.length\n    : 0\n\n  // Compute horizontal layout.\n  // If a `labelColor` is set, the logo is always set against it, even when\n  // there is no label. When `needsLabelRect` is true, render a label rect and a\n  // message rect; when false, only a message rect.\n  const hasLabel = Boolean(label.length)\n  const needsLabelRect = hasLabel || (logo \u0026\u0026 labelColor)\n  let logoMinX, labelTextMinX\n  if (logo) {\n    logoMinX = LOGO_MARGIN\n    labelTextMinX = logoMinX + logoWidth + LOGO_TEXT_GUTTER\n  } else {\n    labelTextMinX = TEXT_MARGIN\n  }\n  let labelRectWidth, messageTextMinX, messageRectWidth\n  if (needsLabelRect) {\n    if (hasLabel) {\n      labelRectWidth = labelTextMinX + labelTextWidth + TEXT_MARGIN\n    } else {\n      labelRectWidth = 2 * LOGO_MARGIN + logoWidth\n    }\n    messageTextMinX = labelRectWidth + TEXT_MARGIN\n    messageRectWidth = 2 * TEXT_MARGIN + messageTextWidth\n  } else {\n    if (logo) {\n      messageTextMinX = TEXT_MARGIN + logoWidth + LOGO_TEXT_GUTTER\n      messageRectWidth =\n        2 * TEXT_MARGIN + logoWidth + LOGO_TEXT_GUTTER + messageTextWidth\n    } else {\n      messageTextMinX = TEXT_MARGIN\n      messageRectWidth = 2 * TEXT_MARGIN + messageTextWidth\n    }\n  }\n\n  const logoElement = new XmlElement({\n    name: 'image',\n    attrs: {\n      x: logoMinX,\n      y: 0.5 * (BADGE_HEIGHT - LOGO_HEIGHT),\n      width: logoWidth,\n      height: LOGO_HEIGHT,\n      'xlink:href': logo,\n    },\n  })\n\n  function getLabelElement() {\n    const { textColor } = colorsForBackground(outLabelColor)\n    const midX = labelTextMinX + 0.5 * labelTextWidth\n    const text = new XmlElement({\n      name: 'text',\n      content: [label],\n      attrs: {\n        transform: FONT_SCALE_DOWN_VALUE,\n        x: FONT_SCALE_UP_FACTOR * midX,\n        y: 175,\n        textLength: FONT_SCALE_UP_FACTOR * labelTextWidth,\n        fill: textColor,\n      },\n    })\n\n    if (hasLeftLink \u0026\u0026 !shouldWrapBodyWithLink({ links })) {\n      const rect = new XmlElement({\n        name: 'rect',\n        attrs: {\n          width: labelRectWidth,\n          height: BADGE_HEIGHT,\n          fill: 'rgba(0,0,0,0)',\n        },\n      })\n      return new XmlElement({\n        name: 'a',\n        content: [rect, text],\n        attrs: {\n          target: '_blank',\n          'xlink:href': leftLink,\n        },\n      })\n    } else {\n      return text\n    }\n  }\n\n  function getMessageElement() {\n    const { textColor } = colorsForBackground(color)\n    const midX = messageTextMinX + 0.5 * messageTextWidth\n    const text = new XmlElement({\n      name: 'text',\n      content: [message],\n      attrs: {\n        transform: FONT_SCALE_DOWN_VALUE,\n        x: FONT_SCALE_UP_FACTOR * midX,\n        y: 175,\n        textLength: FONT_SCALE_UP_FACTOR * messageTextWidth,\n        fill: textColor,\n        'font-weight': 'bold',\n      },\n    })\n\n    if (hasRightLink) {\n      const rect = new XmlElement({\n        name: 'rect',\n        attrs: {\n          width: messageRectWidth,\n          height: BADGE_HEIGHT,\n          x: labelRectWidth || 0,\n          fill: 'rgba(0,0,0,0)',\n        },\n      })\n      return new XmlElement({\n        name: 'a',\n        content: [rect, text],\n        attrs: {\n          target: '_blank',\n          'xlink:href': rightLink,\n        },\n      })\n    } else {\n      return text\n    }\n  }\n\n  let backgroundContent\n  if (needsLabelRect) {\n    backgroundContent = [\n      new XmlElement({\n        name: 'rect',\n        attrs: {\n          width: labelRectWidth,\n          height: BADGE_HEIGHT,\n          fill: outLabelColor,\n        },\n      }),\n      new XmlElement({\n        name: 'rect',\n        attrs: {\n          x: labelRectWidth,\n          width: messageRectWidth,\n          height: BADGE_HEIGHT,\n          fill: color,\n        },\n      }),\n    ]\n  } else {\n    backgroundContent = [\n      new XmlElement({\n        name: 'rect',\n        attrs: {\n          width: messageRectWidth,\n          height: BADGE_HEIGHT,\n          fill: color,\n        },\n      }),\n    ]\n  }\n\n  const backgroundGroup = new XmlElement({\n    name: 'g',\n    content: backgroundContent,\n    attrs: {\n      'shape-rendering': 'crispEdges',\n    },\n  })\n  const foregroundGroup = new XmlElement({\n    name: 'g',\n    content: [\n      logo ? logoElement : '',\n      hasLabel ? getLabelElement() : '',\n      getMessageElement(),\n    ],\n    attrs: {\n      fill: '#fff',\n      'text-anchor': 'middle',\n      'font-family': FONT_FAMILY,\n      'text-rendering': 'geometricPrecision',\n      'font-size': FONT_SCALE_UP_FACTOR * FONT_SIZE,\n    },\n  })\n\n  // Render.\n  return renderBadge(\n    {\n      links,\n      leftWidth: labelRectWidth || 0,\n      rightWidth: messageRectWidth,\n      accessibleText: createAccessibleText({ label, message }),\n      height: BADGE_HEIGHT,\n    },\n    [backgroundGroup.render(), foregroundGroup.render()].join('')\n  )\n}\n\nmodule.exports = {\n  plastic: params =\u003e Plastic.render(params),\n  flat: params =\u003e Flat.render(params),\n  'flat-square': params =\u003e FlatSquare.render(params),\n  social,\n  'for-the-badge': forTheBadge,\n}\n","'use strict'\n\nconst { normalizeColor, toSvgColor } = require('./color')\nconst badgeRenderers = require('./badge-renderers')\nconst { stripXmlWhitespace } = require('./xml')\n\n/*\nnote: makeBadge() is fairly thinly wrapped so if we are making changes here\nit is likely this will impact on the package's public interface in index.js\n*/\nmodule.exports = function makeBadge({\n  format,\n  style = 'flat',\n  label,\n  message,\n  color,\n  labelColor,\n  logo,\n  logoPosition,\n  logoWidth,\n  links = ['', ''],\n}) {\n  // String coercion and whitespace removal.\n  label = `${label}`.trim()\n  message = `${message}`.trim()\n\n  // This ought to be the responsibility of the server, not `makeBadge`.\n  if (format === 'json') {\n    return JSON.stringify({\n      label,\n      message,\n      logoWidth,\n      // Only call normalizeColor for the JSON case: this is handled\n      // internally by toSvgColor in the SVG case.\n      color: normalizeColor(color),\n      labelColor: normalizeColor(labelColor),\n      link: links,\n      name: label,\n      value: message,\n    })\n  }\n\n  const render = badgeRenderers[style]\n  if (!render) {\n    throw new Error(`Unknown badge style: '${style}'`)\n  }\n\n  logoWidth = +logoWidth || (logo ? 14 : 0)\n\n  return stripXmlWhitespace(\n    render({\n      label,\n      message,\n      links,\n      logo,\n      logoPosition,\n      logoWidth,\n      logoPadding: logo \u0026\u0026 label.length ? 3 : 0,\n      color: toSvgColor(color),\n      labelColor: toSvgColor(labelColor),\n    })\n  )\n}\n","'use strict'\n/**\n * @module badge-maker\n */\n\nconst _makeBadge = require('./make-badge')\n\nclass ValidationError extends Error {}\n\nfunction _validate(format) {\n  if (format !== Object(format)) {\n    throw new ValidationError('makeBadge takes an argument of type object')\n  }\n\n  if (!('message' in format)) {\n    throw new ValidationError('Field `message` is required')\n  }\n\n  const stringFields = ['labelColor', 'color', 'message', 'label']\n  stringFields.forEach(function (field) {\n    if (field in format \u0026\u0026 typeof format[field] !== 'string') {\n      throw new ValidationError(`Field \\`${field}\\` must be of type string`)\n    }\n  })\n\n  const styleValues = [\n    'plastic',\n    'flat',\n    'flat-square',\n    'for-the-badge',\n    'social',\n  ]\n  if ('style' in format \u0026\u0026 !styleValues.includes(format.style)) {\n    throw new ValidationError(\n      `Field \\`style\\` must be one of (${styleValues.toString()})`\n    )\n  }\n}\n\nfunction _clean(format) {\n  const expectedKeys = ['label', 'message', 'labelColor', 'color', 'style']\n\n  const cleaned = {}\n  Object.keys(format).forEach(key =\u003e {\n    if (format[key] != null \u0026\u0026 expectedKeys.includes(key)) {\n      cleaned[key] = format[key]\n    } else {\n      throw new ValidationError(\n        `Unexpected field '${key}'. Allowed values are (${expectedKeys.toString()})`\n      )\n    }\n  })\n\n  // Legacy.\n  cleaned.label = cleaned.label || ''\n\n  return cleaned\n}\n\n/**\n * Create a badge\n *\n * @param {object} format Object specifying badge data\n * @param {string} format.label (Optional) Badge label (e.g: 'build')\n * @param {string} format.message (Required) Badge message (e.g: 'passing')\n * @param {string} format.labelColor (Optional) Label color\n * @param {string} format.color (Optional) Message color\n * @param {string} format.style (Optional) Visual style e.g: 'flat'\n * @returns {string} Badge in SVG format\n * @see https://github.com/badges/shields/tree/master/badge-maker/README.md\n */\nfunction makeBadge(format) {\n  _validate(format)\n  const cleanedFormat = _clean(format)\n  return _makeBadge(cleanedFormat)\n}\n\nmodule.exports = {\n  makeBadge,\n  ValidationError,\n}\n","import * as __module from \"badge-maker\";export const { makeBadge,ValidationError } = __module;const { default: __default, ...__rest } = __module;export default (__default !== undefined ? __default : __rest);export * from \"badge-maker\";"],"version":3}
