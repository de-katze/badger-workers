{"mappings":";6mBAAA,IAAAA,EAAAC,EAAA,CAAAC,EAAAC,IAAA,CAAAA,EAAO,QAAU,SAASC,EAAUC,EAAQC,EAAYC,EAAKC,EAAM,CACjE,IAAIC,EAAKC,EAET,GAAGH,IAAQ,OACTA,EAAM,UAGNA,EAAMA,EAAI,EACPA,EAAM,GAAKA,GAAOH,EAAS,OAC5B,MAAM,IAAI,WAAW,qBAAqB,EAG9C,GAAGI,IAAS,OACVA,EAAOJ,EAAS,OAAS,UAGzBI,EAAOA,EAAK,EACTA,EAAOD,GAAOC,GAAQJ,EAAS,OAChC,MAAM,IAAI,WAAW,qBAAqB,EAG9C,KAAMG,GAAOC,GASX,GAJAC,EAAMF,GAAQC,EAAOD,IAAS,GAC9BG,EAAM,CAACJ,EAAWF,EAASK,CAAG,EAAGJ,EAAQI,EAAKL,CAAQ,EAGnDM,EAAM,EACPH,EAAOE,EAAM,UAGPC,EAAM,EACZF,EAAOC,EAAM,MAIb,QAAOA,EAIX,MAAO,CAACF,CACV,IC5CA,IAAAI,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,IAAAC,EAA0B,OAAiIC,EAAAJ,EAAc,QAA/H,GAAM,CAAE,QAASK,EAAW,GAAGC,CAAO,EAAIH,EAAgBD,EAASG,IAAc,OAAYA,EAAYC","names":["require_binary_search","__commonJSMin","exports","module","haystack","needle","comparator","low","high","mid","cmp","build_exports","__export","build_default","__module","__reExport","__default","__rest"],"sourceRoot":"/","sources":["../../../../../var/www/esmd/npm/binary-search@1.3.6/node_modules/.pnpm/binary-search@1.3.6/node_modules/binary-search/index.js","../../../../../var/www/esmd/npm/binary-search@1.3.6/build.js"],"sourcesContent":["module.exports = function(haystack, needle, comparator, low, high) {\n  var mid, cmp;\n\n  if(low === undefined)\n    low = 0;\n\n  else {\n    low = low|0;\n    if(low \u003c 0 || low \u003e= haystack.length)\n      throw new RangeError(\"invalid lower bound\");\n  }\n\n  if(high === undefined)\n    high = haystack.length - 1;\n\n  else {\n    high = high|0;\n    if(high \u003c low || high \u003e= haystack.length)\n      throw new RangeError(\"invalid upper bound\");\n  }\n\n  while(low \u003c= high) {\n    // The naive `low + high \u003e\u003e\u003e 1` could fail for array lengths \u003e 2**31\n    // because `\u003e\u003e\u003e` converts its operands to int32. `low + (high - low \u003e\u003e\u003e 1)`\n    // works for array lengths \u003c= 2**32-1 which is also Javascript's max array\n    // length.\n    mid = low + ((high - low) \u003e\u003e\u003e 1);\n    cmp = +comparator(haystack[mid], needle, mid, haystack);\n\n    // Too low.\n    if(cmp \u003c 0.0)\n      low  = mid + 1;\n\n    // Too high.\n    else if(cmp \u003e 0.0)\n      high = mid - 1;\n\n    // Key found.\n    else\n      return mid;\n  }\n\n  // Key not found.\n  return ~low;\n}\n","import * as __module from \"binary-search\";const { default: __default, ...__rest } = __module;export default (__default !== undefined ? __default : __rest);export * from \"binary-search\";"],"version":3}
