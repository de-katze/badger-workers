{"mappings":";;;;;;;;;s2BAAA,IAAAA,EAAAC,EAAA,CAAAC,EAAAC,IAAA,cAEA,IAAIC,EAAU,EAAQ,UAAU,EAC5BC,EAAuB,EAAQ,wBAAwB,EACvDC,EAAW,EAAQ,WAAW,EAC9BC,EAAY,EAAQ,qBAAqB,EACzCC,EAAO,EAAQ,MAAM,EAErBC,EAAYF,EAAU,2BAA2B,EACjDG,EAAiB,EAAQ,uBAAuB,EAAE,EAElDC,EAAI,OAAO,WAAe,IAAc,UAAS,WACjDC,EAAcP,EAAqB,EAEnCQ,EAASN,EAAU,wBAAwB,EAC3CO,EAAiB,OAAO,eAExBC,EAAWR,EAAU,0BAA2B,EAAI,GAAK,SAAiBS,EAAOC,EAAO,CAC3F,QAASC,EAAI,EAAGA,EAAIF,EAAM,OAAQE,GAAK,EACtC,GAAIF,EAAME,CAAC,IAAMD,EAChB,OAAOC,EAGT,MAAO,EACR,EACIC,EAAQ,CAAE,UAAW,IAAK,EAC1BT,GAAkBF,GAAQM,EAC7BV,EAAQQ,EAAa,SAAUQ,EAAY,CAC1C,IAAIC,EAAM,IAAIV,EAAES,CAAU,EAC1B,GAAI,OAAO,eAAeC,EAAK,CAC9B,IAAIC,EAAQR,EAAeO,CAAG,EAC1BE,EAAaf,EAAKc,EAAO,OAAO,WAAW,EAC/C,GAAI,CAACC,EAAY,CAChB,IAAIC,EAAaV,EAAeQ,CAAK,EACrCC,EAAaf,EAAKgB,EAAY,OAAO,WAAW,CACjD,CACAL,EAAM,IAAMC,CAAU,EAAId,EAASiB,EAAW,GAAG,CAClD,CACD,CAAC,EAEDnB,EAAQQ,EAAa,SAAUQ,EAAY,CAC1C,IAAIC,EAAM,IAAIV,EAAES,CAAU,EACtBK,EAAKJ,EAAI,OAASA,EAAI,IACtBI,IACHN,EAAM,IAAMC,CAAU,EAAId,EAASmB,CAAE,EAEvC,CAAC,EAGF,IAAIC,EAAiB,SAA2BT,EAAO,CACtD,IAAIU,EAAQ,GACZ,OAAAvB,EAAQe,EAAO,SAAUS,EAAQR,EAAY,CAC5C,GAAI,CAACO,EACJ,GAAI,CACC,IAAMC,EAAOX,CAAK,IAAMG,IAC3BO,EAAQd,EAAOO,EAAY,CAAC,EAE9B,MAAY,CAAO,CAErB,CAAC,EACMO,CACR,EAEIE,EAAY,SAAsBZ,EAAO,CAC5C,IAAIU,EAAQ,GACZ,OAAAvB,EAAQe,EAAO,SAAUS,EAAQE,EAAM,CACtC,GAAI,CAACH,EACJ,GAAI,CACHC,EAAOX,CAAK,EACZU,EAAQd,EAAOiB,EAAM,CAAC,CACvB,MAAY,CAAO,CAErB,CAAC,EACMH,CACR,EAEAxB,EAAO,QAAU,SAAyBc,EAAO,CAChD,GAAI,CAACA,GAAS,OAAOA,GAAU,SAAY,MAAO,GAClD,GAAI,CAACP,EAAgB,CACpB,IAAIqB,EAAMlB,EAAOJ,EAAUQ,CAAK,EAAG,EAAG,EAAE,EACxC,OAAIF,EAASH,EAAamB,CAAG,EAAI,GACzBA,EAEJA,IAAQ,SACJ,GAGDF,EAAUZ,CAAK,CACvB,CACA,OAAKT,EACEkB,EAAeT,CAAK,EADP,IAErB,IC3FA,IAAAe,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,IAAAC,EAA0B,OAAqIC,EAAAJ,EAAc,QAA/H,GAAM,CAAE,QAASK,EAAW,GAAGC,CAAO,EAAIH,EAAgBD,EAASG,IAAc,OAAYA,EAAYC","names":["require_which_typed_array","__commonJSMin","exports","module","forEach","availableTypedArrays","callBind","callBound","gOPD","$toString","hasToStringTag","g","typedArrays","$slice","getPrototypeOf","$indexOf","array","value","i","cache","typedArray","arr","proto","descriptor","superProto","fn","tryTypedArrays","found","getter","trySlices","name","tag","build_exports","__export","build_default","__module","__reExport","__default","__rest"],"sourceRoot":"/","sources":["../../../../../var/www/esmd/npm/which-typed-array@1.1.13/node_modules/.pnpm/which-typed-array@1.1.13/node_modules/which-typed-array/index.js","../../../../../var/www/esmd/npm/which-typed-array@1.1.13/build.js"],"sourcesContent":["'use strict';\n\nvar forEach = require('for-each');\nvar availableTypedArrays = require('available-typed-arrays');\nvar callBind = require('call-bind');\nvar callBound = require('call-bind/callBound');\nvar gOPD = require('gopd');\n\nvar $toString = callBound('Object.prototype.toString');\nvar hasToStringTag = require('has-tostringtag/shams')();\n\nvar g = typeof globalThis === 'undefined' ? global : globalThis;\nvar typedArrays = availableTypedArrays();\n\nvar $slice = callBound('String.prototype.slice');\nvar getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');\n\nvar $indexOf = callBound('Array.prototype.indexOf', true) || function indexOf(array, value) {\n\tfor (var i = 0; i \u003c array.length; i += 1) {\n\t\tif (array[i] === value) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n};\nvar cache = { __proto__: null };\nif (hasToStringTag \u0026\u0026 gOPD \u0026\u0026 getPrototypeOf) {\n\tforEach(typedArrays, function (typedArray) {\n\t\tvar arr = new g[typedArray]();\n\t\tif (Symbol.toStringTag in arr) {\n\t\t\tvar proto = getPrototypeOf(arr);\n\t\t\tvar descriptor = gOPD(proto, Symbol.toStringTag);\n\t\t\tif (!descriptor) {\n\t\t\t\tvar superProto = getPrototypeOf(proto);\n\t\t\t\tdescriptor = gOPD(superProto, Symbol.toStringTag);\n\t\t\t}\n\t\t\tcache['$' + typedArray] = callBind(descriptor.get);\n\t\t}\n\t});\n} else {\n\tforEach(typedArrays, function (typedArray) {\n\t\tvar arr = new g[typedArray]();\n\t\tvar fn = arr.slice || arr.set;\n\t\tif (fn) {\n\t\t\tcache['$' + typedArray] = callBind(fn);\n\t\t}\n\t});\n}\n\nvar tryTypedArrays = function tryAllTypedArrays(value) {\n\tvar found = false;\n\tforEach(cache, function (getter, typedArray) {\n\t\tif (!found) {\n\t\t\ttry {\n\t\t\t\tif ('$' + getter(value) === typedArray) {\n\t\t\t\t\tfound = $slice(typedArray, 1);\n\t\t\t\t}\n\t\t\t} catch (e) { /**/ }\n\t\t}\n\t});\n\treturn found;\n};\n\nvar trySlices = function tryAllSlices(value) {\n\tvar found = false;\n\tforEach(cache, function (getter, name) {\n\t\tif (!found) {\n\t\t\ttry {\n\t\t\t\tgetter(value);\n\t\t\t\tfound = $slice(name, 1);\n\t\t\t} catch (e) { /**/ }\n\t\t}\n\t});\n\treturn found;\n};\n\nmodule.exports = function whichTypedArray(value) {\n\tif (!value || typeof value !== 'object') { return false; }\n\tif (!hasToStringTag) {\n\t\tvar tag = $slice($toString(value), 8, -1);\n\t\tif ($indexOf(typedArrays, tag) \u003e -1) {\n\t\t\treturn tag;\n\t\t}\n\t\tif (tag !== 'Object') {\n\t\t\treturn false;\n\t\t}\n\t\t// node \u003c 0.6 hits here on real Typed Arrays\n\t\treturn trySlices(value);\n\t}\n\tif (!gOPD) { return null; } // unknown engine\n\treturn tryTypedArrays(value);\n};\n","import * as __module from \"which-typed-array\";const { default: __default, ...__rest } = __module;export default (__default !== undefined ? __default : __rest);export * from \"which-typed-array\";"],"version":3}
